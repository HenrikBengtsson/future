% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/journal.R
\name{journal}
\alias{journal}
\title{Gets the logged journal of events for a future}
\usage{
journal(x, ...)
}
\arguments{
\item{x}{A \link{Future} object.}

\item{\ldots}{Not used.}
}
\value{
A data frame of class \code{FutureJournal} with columns:
\enumerate{
\item \code{event} (character string)
\item \code{type} (character string)
\item \code{start} (POSIXct)
\item \code{at} (difftime)
\item \code{duration} (difftime)
\item \code{future_label} (character string)
\item \code{future_uuid} (character string)
\item \code{session_uuid} (character string)
}

Common events are:
\itemize{
\item \code{create}   - the future was created (an \code{overhead})
\item \code{launch}   - the future was launched (an \code{overhead})
\item \code{evaluate} - the future was evaluated (an \code{evaluation})
\item \code{resolved} - the future was queried (may be occur multiple times) (an \code{overhead})
\item \code{gather}   - the results was retrieved (an \code{overhead})
}

but others may be added by other Future classes.

Common event types are:
\itemize{
\item \code{evaluation} - processing time is spent on evaluation
\item \code{overhead}   - processing time is spent on orchestrating the future
\item \code{querying}   - processing time is spent on polling the future
}

but others may be added by other Future classes.

The data frame is sorted by the \code{at} time.
Note that the timestamps for the \code{evaluate} event are based on the local
time on the worker. The system clocks on the worker and the calling R
system may be out of sync.
}
\description{
\emph{WARNING: This function is under development. It can change at any time.
For now, please, do not depend on this function in a published R package.}
}
\section{Enabling and disabling event logging}{

To enable logging of events, set option \code{future.journal} is TRUE.
To disable, set it to FALSE (default).
}

\examples{
## Enable journaling of futures
oopts <- options(future.journal = TRUE)

plan(multisession, workers = 2L)

t_start <- Sys.time()
fs <- lapply(1:3, FUN = function(x) future({ Sys.sleep(x); sqrt(x) }))
vs <- value(fs)
js <- lapply(fs, FUN = journal, baseline = t_start)
print(js)

## Stop parallel workers and disable journal logging and signaling
plan(sequential)
options(oopts)
}
\seealso{
Use \code{\link[=capture_journals]{capture_journals()}} to capture journals from all futures.
}
\keyword{internal}
