on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    if: "! contains(github.event.head_commit.message, '[ci skip]')"    

    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }}) ${{ matrix.config.label }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'devel'   }
          - {os: windows-latest, r: 'release' }
          - {os: macOS-latest,   r: 'devel'   }
          - {os: macOS-latest,   r: 'release' }
          - {os: ubuntu-20.04,   r: 'devel'   }
          - {os: ubuntu-20.04,   r: 'release' }
          - {os: ubuntu-20.04,   r: 'release', plan: multicore, fork_multithreading_enable: false, label: 'multicore, no-multithreading-in-forks' }
          - {os: ubuntu-20.04,   r: 'release', plan: multisession, fork_multithreading_enable: false, label: 'multisession, no-multithreading-in-forks' }
          - {os: ubuntu-20.04,   r: 'release', psock_relay_immediate: false, label: 'no-immediate-relay-in-psock' }
          - {os: ubuntu-20.04,   r: 'oldrel'  }
          - {os: ubuntu-20.04,   r: '3.5'     }
          - {os: ubuntu-20.04,   r: '3.4'     }
          - {os: ubuntu-20.04,   r: '3.3'     }

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RSPM: https://packagemanager.rstudio.com/cran/__linux__/focal/latest
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      ## R CMD check
      _R_CHECK_CRAN_INCOMING_: false
      _R_CHECK_LENGTH_1_CONDITION_: true
      _R_CHECK_LENGTH_1_LOGIC2_: true
      _R_CHECK_MATRIX_DATA_: true
      _R_CHECK_SUGGESTS_ONLY_: true
      _R_CHECK_THINGS_IN_TEMP_DIR_: true
      ## Specific to futures
      R_FUTURE_RNG_ONMISUSE: error
      
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@master

      - name: Query R package dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install R package system dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"
          sudo apt install -y libcurl4-openssl-dev

      - name: Install R package dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          install.packages(".", repos=NULL, type="source")  ## needed by parallel workers
        shell: Rscript {0}

      - name: Install 'rcmdcheck'
        run: |
          remotes::install_cran("rcmdcheck")
          library(rcmdcheck)  ## triggers an error, if installation failed
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          parallelly::availableCores(which = "all")
          sapply(c(physical_cores = FALSE, logical_cores = TRUE), parallel::detectCores)
          if (require(RhpcBLASctl, quietly=TRUE)) c(get_num_procs = get_num_procs(), get_num_cores = get_num_cores(), blas_get_num_procs = blas_get_num_procs(), omp_get_num_procs = omp_get_num_procs(), omp_get_max_threads = omp_get_max_threads())
          capabilities()
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check (!Windows)
        if: runner.os != 'Windows'
        env:
          ## FIXME: Eventually update to 'R_FUTURE_GLOBALS_ONREFERENCE=error'
          R_FUTURE_GLOBALS_ONREFERENCE: "warning"
          R_FUTURE_PLAN: ${{ matrix.config.plan }}
          R_FUTURE_FORK_ENABLE: ${{ matrix.config.fork_enable }}
          R_FUTURE_FORK_MULTITHREADING_ENABLE: ${{ matrix.config.fork_multithreading_enable }}
          R_FUTURE_PSOCK_RELAY_IMMEDIATE: ${{ matrix.config.psock_relay_immediate }}
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", if (.Platform$OS.type == "windows" && getRversion() >= "4.2.0") "--no-multiarch"), error_on = if (nzchar(Sys.getenv("R_FUTURE_PLAN"))) "error" else "warning", check_dir = "check")
        shell: Rscript {0}
 
      - name: Check (Windows)
        if: runner.os == 'Windows'
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", if (.Platform$OS.type == "windows" && getRversion() >= "4.2.0") "--no-multiarch"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
